{"componentChunkName":"component---src-pages-index-js","path":"/","webpackCompilationHash":"488c2fc9a0d4ef73335c","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"19a7c7cf-b0b4-5d89-bd35-0f9927db388f","html":"<ol>\n<li><strong>Aprendizaje:</strong>  Mide qué tan fácil es para un usuario primerizo completar una tarea.</li>\n<li><strong>Eficiencia:</strong> Mide cuánto tiempo un usuario se dedica a una determinada tarea y si ese tiempo puede reducirse.</li>\n<li><strong>Memoriabilidad:</strong> Mide el grado en que los usuarios pueden recordar cómo usar una interfaz después de un tiempo sin interactuar con ella.</li>\n<li><strong>Manejo de errores:</strong> Esto significa qué tan bien una plataforma identifica posibles errores del usuario y qué tan bien intenta evitarlos.</li>\n<li><strong>Satisfacción:</strong> ¿Cómo se sienten los usuarios al completar una determinada tarea? ¿Están frustrados? Si es así, ¿cómo puede evitarse eso?</li>\n</ol>\n<p>Fuente: UX Bites <a href=\"https://www.instagram.com/uxbites/\">https://www.instagram.com/uxbites/</a></p>","frontmatter":{"path":"/factores-claves-de-la-usabilidad","title":"5 factores claves de la Usabilidad","date":"2019-11-08","author":"yethpenado","tags":["ux","design","usability"]}}},{"node":{"id":"a136dd9e-1ae1-5419-9154-0da22bc143e3","html":"<p><strong>¿Qué es rest?</strong></p>\n<p><strong>rest</strong> es un operador que reúne cualquier número de argumentos en un array y podemos hacer lo que queramos con ellos. Esto nos permite hacer definiciones de funciones realmente ordenadas.</p>\n<p><strong>La forma común</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> nationality</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> nationality<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token string\">'William Paul Young'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Canada'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//William Paul Young, 64, Canada</span></code></pre></div>\n<p><strong>La forma con rest</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">function</span> <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>autor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>autor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nacarid Portal'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Venezuela'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//[\"Nacarid Portal\", 28, \"Venezuela\"]</span></code></pre></div>\n<p><strong>Nota :</strong>\nParámetros usando el operador rest deben estar en el último argumento.</p>\n<p><strong>¿Qué es spread?</strong></p>\n<p><strong>spread</strong> es un operador que es contario a <strong>rest</strong>, porque en vez recibir datos, podemos enviarlos a partir de un array que se expone y se convierte en un listado de argumentos.</p>\n<p>Ahora sí, ¿cómo podemos agregar elementos a un array con spread?</p>\n<p><strong>La forma común de agregar elementos al inicio de un array</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Joy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wangari'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hola'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mundo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Manzana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//[\"Mundo\", \"Manzana\", \"Joy\", \"Wangari\", \"Hola\"]</span></code></pre></div>\n<p><strong>La forma común de agregar elementos al final de un array</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Joy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wangari'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hola'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sandia'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'limon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//[\"Joy\", \"Wangari\", \"Hola\", \"sandia\", \"limon\"]</span></code></pre></div>\n<p><strong>La forma con spread</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">   <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Joy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Wangari'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hola'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'joykare'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token string\">'pera'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//[\"joykare\", \"Joy\", \"Wangari\", \"Hola\", \"pera\"]</span></code></pre></div>\n<p>Al agregar un nuevo elemento al array con un <strong>spread</strong> no importa si es al inicio o al final, lo puedes hacer en cualquier de los dos lugares y no va a haber problema alguno.</p>\n<p><a href=\"https://scotch.io/bar-talk/javascripts-three-dots-spread-vs-rest-operators543\">Info de REST y de SPREAD</a></p>","frontmatter":{"path":"/agregar-elementos-a-array","title":"Agregar elementos a un array","date":"2019-10-30","author":"glorianaa80","tags":["javascript"]}}},{"node":{"id":"8246090b-4fdd-5eb5-a012-cad2838030f0","html":"<p><abbr title=\"Today I Learned\">TIL</abbr> como mover archivos entre un servidor remoto y el sistema local; <code class=\"language-text\">scp</code> <a href=\"https://en.wikipedia.org/wiki/Secure_copy\">Secure copy protocol</a> al rescate.</p>\n<p>La estructura básica del comando es algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scp &lt;OPTIONS&gt; &lt;SOURCE_FILE_OR_DIRECTORY&gt; &lt;TARGET_FILE_OR_DIRECTORY&gt;</code></pre></div>\n<p>Cuando la ruta de los archivos incluye un servidor remoto, primero hay que agregar la dirección del servidor:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;user&gt;@&lt;ip_or_domain_name&gt;:&lt;remote_directory&gt;</code></pre></div>\n<h2>Algunos casos útiles</h2>\n<p>Mover archivo desde local a un servidor remoto</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scp &lt;file_path&gt; &lt;user&gt;@&lt;remote_host&gt;:&lt;remote_directory&gt;</code></pre></div>\n<p>Mover archivo desde un servidor remoto a local</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scp &lt;user&gt;@&lt;remote_host&gt;:&lt;remote_file_path&gt; &lt;local_directory&gt;</code></pre></div>\n<p>Multiples archivos desde local a un servidor remoto</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scp &lt;file_path&gt; &lt;file_path&gt; &lt;user&gt;@&lt;remote_host&gt;:&lt;remote_directory&gt;</code></pre></div>\n<p>Mover un directorio desde local a un servidor remoto</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scp -r &lt;local_directory&gt; &lt;user&gt;@&lt;remote_host&gt;:&lt;remote_directory&gt;</code></pre></div>\n<p>Mover un directorio desde un servidor remoto a local</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scp -r &lt;user&gt;@&lt;remote_host&gt;:&lt;remote_directory&gt; &lt;local_directory&gt;</code></pre></div>","frontmatter":{"path":"/transferir-archivos-entre-servidor-sistema-local","title":"Transferir archivos entre un servidor remoto y sistema local","date":"2019-10-30","author":"jleiva","tags":["command-line"]}}},{"node":{"id":"0e2d1c2b-1b15-5c51-9847-f224c4fc0c2b","html":"<p>Tener pequeñas lineas de código publicadas en NPM package nos facilitará un poco nuestro flujo de trabajo, ya que, podemos acceder a ellas desde cualquier proyecto y con una sola línea de comando, lo cual nos beneficia en no perder tiempo  buscando código que necesitamos y utilizamos en proyectos pasados que no sabemos en dónde está, o aún peor que no sabemos si tenemos.</p>\n<ul>\n<li>Primero se necesita tener una cuenta en <a href=\"https://www.npmjs.com/signup\">npm</a></li>\n<li>En segundo lugar, debe iniciar sesión en la cuenta de npm a\ntravés de la siguiente línea de comando.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm login</code></pre></div>\n<p>Pedirá que ingrese su nombre de usuario, contraseña y\ndirección de correo electrónico.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Username: joseth\nPassword:\nEmail: (this IS public) joseth@gmail.com\nLogged in as joseth on https://registry.npm.org/.</code></pre></div>\n<ul>\n<li>Como tercer paso creamos una carpeta en el escritorio y accedemos a ella con la siguiente\nlínea de comando.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Comando para crear la carpeta\nmkdir mi-primer-paquete-en-npm\n\n# Comando para acceder a la carpeta\ncd mi-primer-paquete-en-npm</code></pre></div>\n<ul>\n<li>El siguiente comando ejecuta algunas preguntas y crea un\npackage.json. Este archivo contiene las dependencias básicas que se necesitan para\npublicar el proyecto.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm init</code></pre></div>\n<ul>\n<li>Ya cuando se tenga el código que deseamos (en la carpeta que creamos anteriormente) publicar en NPM package, como último paso ejecutamos la siguiente línea de comando.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm publish</code></pre></div>\n<p>Cuando el paquete se publicó exitosamente en el sitio de NPM package se mostrará en la terminal un mensaje como el siguiente </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">publishing-to-npm@1.0.0</code></pre></div>\n<p>Fuente: <a href=\"https://zellwk.com/blog/publish-to-npm/\">zellwk</a></p>","frontmatter":{"path":"/como-publicar-paquetes-en-npm","title":"¿Cómo publicar paquetes en NPM?","date":"2019-10-29","author":"hillaryCF","tags":["nodejs","npm"]}}},{"node":{"id":"a631c6f5-2d5c-5a0a-a9af-be7d4c305349","html":"<p>Image Replacement es una tecnica que, usando CSS, nos permite reemplazar el texto de un elemento por una imagen. Image Replacement te puede funcionar para cuando tu sitio tiene que utilizar varias tipografías y no quieres cargarlas, ya sea porque sólo se utilizan una vez, en un título ó en algo muy pequeño, si cargas la tipografía tu sitio se puede volver más lento o simplemente la tipografía no está para web.</p>\n<p><strong>En HTML escogemos la etiqueta que usaremos y le ponemos el texto a reemplazar</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>image-re<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hola<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>Usando CSS podemos hacer el reemplazo de texto por imagen</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.image-re</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> transparent <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>\"./hola.svg\"<span class=\"token punctuation\">)</span></span> no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> \n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-indent</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 30%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://css-tricks.com/the-image-replacement-museum/\">Más detalles en CSS Tricks</a></p>","frontmatter":{"path":"/image-replacement","title":"Image Replacement","date":"2019-10-28","author":"glorianaa80","tags":["css"]}}},{"node":{"id":"88933d75-fe9f-5bd7-abc5-c19d9d6bc022","html":"<p>Cuando se colocan los backtips ergo \"`\", a la derecha de una función, esta se ejecuta pasando como argumento el string entre los backtips.</p>\n<p>... Así que, ¿esto a qué se refiere?</p>\n<p><strong>Tenemos esta función</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHelloTo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">someone</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>someone<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Esta es la forma clásica de invocarla</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">sayHelloTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cool person'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Y este es su equivalente usando tag functions</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">sayHelloTo<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">cool person</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Cualquiera de las dos invocaciones devolverá:</strong> 'Hello, cool person'</p>\n<p>Basándome en la <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/template_strings#Plantillas_de_cadena_de_texto_con_postprocesador\">documentación de Developer Mozilla</a>, en español se les llaman <em>Plantillas de cadena de texto con postprocesador</em></p>\n<p><strong>Documentación:</strong> <a href=\"https://codeburst.io/javascript-template-literals-tag-functions-for-beginners-758a041160e1\">https://codeburst.io/javascript-template-literals-tag-functions-for-beginners-758a041160e1</a></p>\n<p>Conclusión, esto solo es \"syntactic sugar\"</p>","frontmatter":{"path":"/una-forma-rara-de-ejecutar-funciones-tag-functions","title":"Una forma rara de ejecutar funciones || Tag Functions","date":"2019-10-26","author":"LuisArmando-TestCoder","tags":["es6"]}}},{"node":{"id":"5ef9ab05-23d3-577d-8b6b-2ee7387aef1f","html":"<p>Cuando desarrollamos apps con Node, es importante encriptar las contraseñas para que el sitio sea más seguro, en especial cuando se almacena información importante.</p>\n<p>Podemos encriptar contraseñas usando Cryptr.</p>\n<p><em>instalación</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">npm install cryptr</code></pre></div>\n<p><em>implementación</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Cryptr <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cryptr'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cryptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cryptr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myTotalySecretKey'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">const</span> encryptedString <span class=\"token operator\">=</span> cryptr<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyPassword'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> decryptedString <span class=\"token operator\">=</span> cryptr<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>encryptedString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>encryptedString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5590fd6409be2494de0226f5d7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decryptedString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// MyPassword</span></code></pre></div>\n<p><a href=\"https://www.npmjs.com/package/cryptr\">Aquí está la documentación</a></p>","frontmatter":{"path":"/encriptar-contrasenas-en-node","title":"Encriptar contraseñas en NodeJS","date":"2019-10-23","author":"sauljlm","tags":["nodejs","cryptr"]}}},{"node":{"id":"3f7b8113-7d93-5372-93ee-c43f2c9230e6","html":"<p>Hoy eche a perder un branch local, a tal punto que era más fácil borrarlo y crear uno nuevo basado en el remoto que solucionar los conflictos.</p>\n<p>Normalmente para crear un branch nuevo es tan sencillo como hacer <code class=\"language-text\">fetch</code> y crear el branch:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git fetch\ngit checkout &lt;branch-name&gt;</code></pre></div>\n<p>Lo anterior funciona bien cuando se tiene sólo un <code class=\"language-text\">remote</code> configurado, pero, en este caso tenía dos; la solución es indicar el nombre del <code class=\"language-text\">remote</code> y del branch remoto:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># para saber el nombre del remote\ngit remote -v \ngit checkout -b &lt;branch-name&gt; &lt;name of remote&gt;/&lt;branch-name&gt;</code></pre></div>","frontmatter":{"path":"/como-crear-branch-basado-remote-branch","title":"Crear un branch basado en un branch remoto","date":"2019-10-18","author":"jleiva","tags":["git"]}}},{"node":{"id":"54872fa2-cf0f-5591-a9f3-4d6602235496","html":"<p>El comando <code class=\"language-text\">tail</code> se usa frecuentemente para mostrar el final de un archivo de texto. Cuando se tiene un log que se actualiza de manera constante, digamos logs de accesos en un servidor, es útil ver los últimos registros y cualquier nueva entrada que se incluya mientras tenemos el archivo abierto.</p>\n<p>Usando <code class=\"language-text\">tail</code>, y un par de argumentos extras, podemos lograr lo anterior: <code class=\"language-text\">-f</code> va a estar revisando los últimos registros en el archivo y con <code class=\"language-text\">-n</code> podemos definir el número de líneas a mostrar, el default son 10.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tail -f -n100 /the/log/file/location</code></pre></div>\n<p>Fuente: <a href=\"https://medium.com/@devron/how-to-view-log-files-in-terminal-6a1142ee6776\">https://medium.com/@devron/how-to-view-log-files-in-terminal-6a1142ee6776</a></p>","frontmatter":{"path":"/listar-registros-recientes-log","title":"Listar registros recientes de un log","date":"2019-10-13","author":"jleiva","tags":["command-line"]}}},{"node":{"id":"603fdb99-8300-56ac-a62f-415521e135ac","html":"<p><img src=\"https://scotch-res.cloudinary.com/image/upload/w_1050,q_auto:good,f_auto/v1540855168/ermj3lsrmxi2ryd0vp28.png\" alt=\"Construí y desplegá tu primera función lambda, por Netlify\"></p>\n<p>Debido a que Heroku tiene este problema\nde quedarse dormido en el trabajo\ndespués de un tiempo de inactividad\nresulta mejor hacer un deploy de una app\nen una plataforma como Netlify.</p>\n<p><a href=\"https://www.youtube.com/watch?v=hQAu0YEIF0g\">Así que aquí va un video que dice cómo hacerlo</a></p>\n<p><em>El siguiente código es parte de lo que se escribió en el video</em></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> serverless <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"serverless-http\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    success<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    error<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token string\">\"BUMP OF CHICKEN「Hello,world!」\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/.netlify/functions/api\"</span><span class=\"token punctuation\">,</span> router<span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> <span class=\"token function\">serverless</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"path":"/hacer-deploy-de-un-app-de-node-con-netlify","title":"Hacer deploy de un app de Node con Netlify","date":"2019-10-02","author":"LuisArmando-TestCoder","tags":["node","netlify"]}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}