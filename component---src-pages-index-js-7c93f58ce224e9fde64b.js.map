{"version":3,"sources":["webpack:///./src/components/postItems.js","webpack:///./src/pages/index.js","webpack:///./src/utils/sortByDate.js"],"names":["posts","currentPage","maxItemsPerPage","splice","map","post","node","frontmatter","title","author","date","path","key","id","to","pageQuery","IndexPage","data","allMarkdownRemark","edges","sort","a","b","Date","getTime","pagesAmount","length","useState","setCurrentPage","postItems","items","setItems","moveCurrentPage","direction","href","onClick","Math","ceil"],"mappings":"0hBAGe,sBAAEA,EAAF,EAAEA,MAAOC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,gBAAtB,OAEf,6BAEQ,EAAIF,GACHG,OAAOF,EAAcC,EAAiBA,GACtCE,KAAI,SAAAC,GAAS,IAAD,EAC6BA,EAAKC,KAAKC,YAAxCC,EADC,EACDA,MAAOC,EADN,EACMA,OAAQC,EADd,EACcA,KAAMC,EADpB,EACoBA,KAC7B,OACI,yBAAKC,IAAKP,EAAKC,KAAKO,IAChB,4BAAKL,GACL,4CAAkBC,EAAlB,MAA6B,IAA7B,IAAmCC,GACnC,kBAAC,OAAD,CAAMI,GAAIH,GAAV,aACA,mCChBpB,0CAQA,IAoCaI,EAAS,aAkBPC,UAtDG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbf,EAAkB,GAClBF,EAAmBiB,EAAKC,kBAAkBC,MCTjCC,MAAK,kBAAQC,EAAR,EAAEf,KAAiBgB,EAAnB,EAAahB,KAAb,OAA0B,IAAIiB,KAAKF,EAAEd,YAAYG,MAAMc,UAAY,IAAID,KAAKD,EAAEf,YAAYG,MAAMc,aDWhHC,EAAczB,EAAM0B,OAASxB,EAJH,EAKMyB,mBAAS,GAAxC1B,EALyB,KAKZ2B,EALY,OAMND,mBAASE,EAAU,CAAC7B,QAAOC,YAAa,EAAGC,qBAA9D4B,EANyB,KAMlBC,EANkB,KAQ9B,SAASC,EAAgBC,IACCA,EAAY,GAAKhC,EAAcgC,EAAYR,GAC3CQ,EAAY,GAAKhC,EAAc,KAErD8B,EAASF,EAAU,CAAC7B,QAAOC,YAAaA,EAAcgC,EAAW/B,qBACjE0B,EAAe3B,EAAcgC,IAIjC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKzB,MAAM,SACTsB,EAEAL,GAAe,EACf,6BACE,uBAAGS,KAAI,KAAMjC,EAAc,GAAKkC,QAAS,kBAAMH,GAAiB,KAAhE,cACA,mCAAS/B,EAAc,EAAvB,MAA6BmC,KAAKC,KAAKZ,GAAvC,KACA,uBAAGS,KAAI,KAAMjC,EAAc,GAAKkC,QAAS,kBAAMH,EAAgB,KAA/D,gBAGF","file":"component---src-pages-index-js-7c93f58ce224e9fde64b.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nexport default ({posts, currentPage, maxItemsPerPage}) =>\r\n\r\n<div>\r\n    {\r\n        [...posts]\r\n        .splice(currentPage * maxItemsPerPage, maxItemsPerPage)\r\n        .map(post => {\r\n            const { title, author, date, path } = post.node.frontmatter;\r\n            return (\r\n                <div key={post.node.id}>\r\n                    <h3>{title}</h3>\r\n                    <small>Posted by {author} on{' '} {date}</small>\r\n                    <Link to={path}>Read More</Link>\r\n                    <hr />\r\n                </div>\r\n            );\r\n        })\r\n    }\r\n</div>\r\n","import React, { useState } from \"react\"\r\n\r\nimport sortByDate from \"../utils/sortByDate\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport postItems from \"../components/postItems\"\r\n\r\nconst IndexPage = ({ data }) => {\r\n  const maxItemsPerPage = 20  ;\r\n  const posts = sortByDate(data.allMarkdownRemark.edges);\r\n\r\n  let pagesAmount = posts.length / maxItemsPerPage;\r\n  let [currentPage, setCurrentPage] = useState(0);\r\n  let [items, setItems] = useState(postItems({posts, currentPage: 0, maxItemsPerPage}));\r\n\r\n  function moveCurrentPage(direction) {\r\n    const isNextAvailable = direction > 0 && currentPage + direction < pagesAmount;\r\n    const isPrevAvailable = direction < 0 && currentPage > 0;\r\n    if (isNextAvailable || isPrevAvailable) {\r\n      setItems(postItems({posts, currentPage: currentPage + direction, maxItemsPerPage}));\r\n      setCurrentPage(currentPage + direction);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Home\" />\r\n      { items }\r\n      {\r\n        pagesAmount >= 1 ?\r\n        <div>\r\n          <a href={`#${currentPage + 1}`} onClick={() => moveCurrentPage(-1)}>&#60; Anterior</a>\r\n          <small> {currentPage + 1} / {Math.ceil(pagesAmount)} </small>\r\n          <a href={`#${currentPage + 1}`} onClick={() => moveCurrentPage(+1)}>Siguiente &#62;</a>\r\n        </div>\r\n        :\r\n        null\r\n      }\r\n    </Layout>\r\n  );\r\n\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogIndexQuery {\r\n    allMarkdownRemark {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            path\r\n            title\r\n            date\r\n            author\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default IndexPage\r\n","export default (array) => {\r\n    return array.sort(({node: a}, {node: b}) => new Date(a.frontmatter.date).getTime() - new Date(b.frontmatter.date).getTime());\r\n};"],"sourceRoot":""}